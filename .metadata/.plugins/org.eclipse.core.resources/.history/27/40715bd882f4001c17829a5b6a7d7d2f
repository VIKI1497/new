package New;

import java.util.function.BiFunction;
import java.util.function.Function;
@FunctionalInterface
interface Sample{
	void show(String msg);
}

public class MethodReference {
	public  void display(String msg) {
		msg.toUpperCase();
		System.out.println(msg);
	}
	public static int addition(int a,int b) {
		return a+b;
	}

	public static void main(String[] args) {
		//1.Method Reference to a static method;
		//Lambda expression
		Function<Integer, Double> function=(input)->Math.sqrt(input);
		System.out.println(function.apply(4));
		//Method reference
		Function<Integer, Double> functionRef=Math::sqrt;
		System.out.println(functionRef.apply(9));
		//Lambda Expression for static method
		BiFunction<Integer, Integer, Integer> biFunction=(a,b)->MethodReference.addition(a,b);
		System.out.println(biFunction.apply(30,58));
		//Method Reference for static method
		BiFunction<Integer, Integer, Integer> biFunction1=MethodReference::addition;
		System.out.println(biFunction1.apply(80, 102));
		
		//2.Method Reference to a instance of an object method
		MethodReference method=new MethodReference();
		//Lambda Expression
		Sample sample=(msg)->method.display(msg);
		sample.show("Welcome to java 8 Features");
	}

}
